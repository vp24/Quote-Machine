{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","loader","setState","prevState","loading","fetchApi","fetch","proxyUrl","then","response","json","data","console","log","quote","quoteText","author","quoteAuthor","catch","error","newQuote","tweetQuote","twitterUrl","state","window","open","this","className","id","icon","faQuoteLeft","onClick","title","faTwitter","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2RAsFeA,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,OAAS,WACP,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BC,SAAUD,EAAUC,aAbL,EAkBnBC,SAAW,WACT,EAAKJ,SACLK,MAAMC,+GAAmBC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAAQF,MAAK,SAAAG,GAC7DC,QAAQC,IAAIF,GACZ,EAAKT,SAAS,CACZY,MAAOH,EAAKI,UACZC,OAAQL,EAAKM,iBAGfC,OAAM,SAAAC,GACNP,QAAQC,IAAIM,GACZ,EAAKd,cAEP,EAAKJ,UA/BY,EAmCnBmB,SAAW,WACT,EAAKf,YApCY,EAuCnBgB,WAAa,WACX,IAAIC,EAAU,gDAA4C,EAAKC,MAAMT,MAAvD,cAAkE,EAAKS,MAAMP,QAC3FQ,OAAOC,KAAKH,EAAY,WAvCxB,EAAKC,MAAQ,CACXT,MAAO,GACPE,OAAQ,GACRZ,SAAS,GALM,E,gEA6CjBsB,KAAKrB,a,+BAMP,OACE,6BACE,6BACA,yBAAKsB,UAAY,kBAAkBC,GAAK,mBACtC,yBAAKD,UAAY,cACjB,kBAAC,IAAD,CAAiBA,UAAY,cAAcE,KAAOC,MAClD,0BAAMF,GAAG,SAASF,KAAKH,MAAMT,QAE7B,yBAAKa,UAAY,gBACf,8BAAOD,KAAKH,MAAMP,WAIpB,yBAAKW,UAAY,oBACf,4BAAQI,QAASL,KAAKL,WAAYM,UAAY,iBAAiBC,GAAK,UAAUI,MAAQ,eAAc,kBAAC,IAAD,CAAiBL,UAAU,aAAaE,KAAMI,OAElJ,4BAAQF,QAAUL,KAAKN,SAAUQ,GAAG,aAApC,mB,GApEQM,IAAMC,WCGJC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAM+B,c","file":"static/js/main.bc9597f2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { icon } from '@fortawesome/fontawesome-svg-core';\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst apiUrl = \"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      author: '',\n      loading: false\n    };\n\n    \n  }\n\n  loader = () => {\n    this.setState(prevState => ({\n      loading: !prevState.loading\n    }));\n  }\n  \n\n  fetchApi = () => {\n    this.loader();\n    fetch(proxyUrl + apiUrl).then(response=> response.json()).then(data =>{\n      console.log(data);\n      this.setState({\n        quote: data.quoteText,\n        author: data.quoteAuthor\n        })\n      }\n    ).catch(error => {\n      console.log(error);\n      this.fetchApi();\n    })\n    this.loader();\n  \n  }\n\n  newQuote = () =>{\n    this.fetchApi();\n  }\n\n  tweetQuote = () => {\n    let twitterUrl = `https://twitter.com/intent/tweet?text=${this.state.quote} - ${this.state.author}`;\n    window.open(twitterUrl, '_blank');\n  }\n\n  componentDidMount(){\n    this.fetchApi();\n  }\n\n\n\n  render(){\n  return (\n    <div>\n      <div>\n      <div className = 'quote-container' id = 'quote-container'>\n        <div className = 'quote-text'>\n        <FontAwesomeIcon className = 'faQuoteLeft' icon={ faQuoteLeft }/>\n        <span id='quote'>{this.state.quote}</span>\n        </div>\n        <div className = 'quote-author'>\n          <span>{this.state.author}</span>\n        </div>\n        </div>\n        </div>\n        <div className = 'button-container'>\n          <button onClick={this.tweetQuote} className = 'twitter-button' id = 'twitter' title = 'Tweet This!'><FontAwesomeIcon className='fa-twitter' icon={faTwitter} />\n          </button>\n          <button onClick= {this.newQuote} id='new-quote'>New Quote</button>\n        </div>\n      \n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}